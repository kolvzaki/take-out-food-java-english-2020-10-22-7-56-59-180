import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        double sum = 0;

        HashMap<String,Integer> mapItem = new HashMap<>();
        HashMap<String,Double> mapPrice = new HashMap<>();

        List<Item> carts = new ArrayList<>();
        List<Item> items = itemRepository.findAll();
        List<SalesPromotion> salesPromotions = salesPromotionRepository.findAll();

        for(String item:inputs){
            String[] res = item.split(" ");
            for (Item i:items){
                mapPrice.put(i.getId(),i.getPrice());
                if (i.getId().equals(res[0])){
                    carts.add(i);
                    sum = sum + Integer.parseInt(res[2]) * i.getPrice();
                    mapItem.put(res[0],Integer.parseInt(res[2]));
                }
            }
        }


        double max_saving = 0;
        SalesPromotion saleRes = null;

        for (SalesPromotion sales:salesPromotions){
            if ("BUY_30_SAVE_6_YUAN".equals(sales.getType())){
                double saving = 0;
                if (sum >= 30){
                    saving = 6;
                    if (saving>max_saving){
                        max_saving = saving;
                        saleRes = sales;
                    }
                }
            }
            if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(sales.getType())){
                double saving = 0;
                for (Map.Entry<String,Integer> entry: mapItem.entrySet()){
                   if (sales.getRelatedItems().contains(entry.getKey())){
                       saving += mapPrice.get(entry.getKey()) * 0.5 * entry.getValue();
                       if (saving>max_saving){
                           max_saving = saving;
                           saleRes = sales;
                       }
                   }
                }
            }
        }
        sum -= max_saving;
//        System.out.println(sum);
//        System.out.println(max_saving);
//        System.out.println("----------------------------------");
        StringBuilder stringBuilder = new StringBuilder("============= Order details =============\n");
        carts.forEach(i->{
            stringBuilder.append(i.getName()+" x "+mapItem.get(i.getId())+" = " + (int)(mapItem.get(i.getId())*mapPrice.get(i.getId()) )+ " yuan\n");
        });
        stringBuilder.append("-----------------------------------\n");
        if (saleRes!=null){
            stringBuilder.append("Promotion used:\n");
            stringBuilder.append(saleRes.getDisplayName());
            if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(saleRes.getType())){
                stringBuilder.append(" (");
                for (Item i:items){
                    if (saleRes.getRelatedItems().contains(i.getId())){
                        stringBuilder.append(i.getName()+"，");
                    }
                }
                stringBuilder.deleteCharAt(stringBuilder.length()-1);
                stringBuilder.append(")");
            }
            stringBuilder.append("，saving "+(int) max_saving +" yuan\n");
            stringBuilder.append("-----------------------------------\n");
        }
        stringBuilder.append("Total："+(int)sum+" yuan\n");
        stringBuilder.append("===================================");
        return stringBuilder.toString();
    }
}
